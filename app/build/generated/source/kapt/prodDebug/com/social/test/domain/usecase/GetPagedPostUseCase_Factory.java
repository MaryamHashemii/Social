// Generated by Dagger (https://dagger.dev).
package com.social.test.domain.usecase;

import com.social.test.domain.repository.AppRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetPagedPostUseCase_Factory implements Factory<GetPagedPostUseCase> {
  private final Provider<AppRepository> appRepositoryProvider;

  private final Provider<CoroutineDispatcher> coroutineDispatcherProvider;

  public GetPagedPostUseCase_Factory(Provider<AppRepository> appRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    this.appRepositoryProvider = appRepositoryProvider;
    this.coroutineDispatcherProvider = coroutineDispatcherProvider;
  }

  @Override
  public GetPagedPostUseCase get() {
    return newInstance(appRepositoryProvider.get(), coroutineDispatcherProvider.get());
  }

  public static GetPagedPostUseCase_Factory create(Provider<AppRepository> appRepositoryProvider,
      Provider<CoroutineDispatcher> coroutineDispatcherProvider) {
    return new GetPagedPostUseCase_Factory(appRepositoryProvider, coroutineDispatcherProvider);
  }

  public static GetPagedPostUseCase newInstance(AppRepository appRepository,
      CoroutineDispatcher coroutineDispatcher) {
    return new GetPagedPostUseCase(appRepository, coroutineDispatcher);
  }
}
